common:
    async_debug: true               # debugging cout only for asynchrnous update
    multi_lidar: true               # if false, single-LiDAR with the first LiDAR topic, extrinsic
    publish_tf_results: true        # publish the transformed LIO and PCD results with extrinsic_T_L1_wrt_drone and extrinsic_R_L1_wrt_drone
    max_iteration: 3                # max iter of IEKF
    map_frame: "map"                # publish frame, e.g., previous LO/LIO methods used "camera_init", which is super inconvenient.
    lid_topic:  "/os1_cloud_node1/points"
    lid_topic2:  "/os1_cloud_node2/points"
    imu_topic:  "/imu/imu"

method:                             # Only used for adaptive mode, thresholds to change mode between bundle and async
    voxelized_pt_num_thres: 1100
    effect_pt_num_ratio_thres: 0.4
    bundle_enabled_tic_thres: 10
    
preprocess:
    filter_size_surf: 0.5           # voxel size
    point_filter_num: 4             # downsampling points, default values: 3 or 2 for LiVOX, 4 for Ouster and Velodyne
    point_filter_num2: 4            # downsampling points, default values: 3 or 2 for LiVOX, 4 for Ouster and Velodyne
    lidar_type: 3                   # 1 for Livox serials LiDAR, 2 for Velodyne LiDAR, 3 for ouster LiDAR, 
    lidar_type2: 3                  # 1 for Livox serials LiDAR, 2 for Velodyne LiDAR, 3 for ouster LiDAR, 
    scan_line: 16
    scan_line2: 16
    scan_rate: 10                   # only need to be set for velodyne, unit: Hz,
    scan_rate2: 10                  # only need to be set for velodyne, unit: Hz,
    timestamp_unit: 3               # the unit of time/t field in the PointCloud2 rostopic: 0-second, 1-milisecond, 2-microsecond, 3-nanosecond.
    timestamp_unit2: 3              # the unit of time/t field in the PointCloud2 rostopic: 0-second, 1-milisecond, 2-microsecond, 3-nanosecond.
    blind: 0.9
    blind2: 0.9

mapping:
    cube_side_length: 1000.0
    acc_cov: 0.1
    gyr_cov: 0.1
    b_acc_cov: 0.0001
    b_gyr_cov: 0.0001
    det_range:     100.0
    extrinsic_est_en:  false       # not supported yet for multi # true: enable the online estimation of IMU-LiDAR extrinsic only for the first LiDAR
    
    ## Choose between (T, R, T2, R2) OR (T, R, T_L2_wrt_L1, R_L2_wrt_L1)
    extrinsic_imu_to_lidars: true # true: use (T, R, T2, R2), false: use (T, R, T_L2_wrt_L1, R_L2_wrt_L1)

    extrinsic_T: [ -0.05, 0.0, 0.055 ]
    extrinsic_R: [1.0, 0.0, 0.0, 
                  0.0, 1.0, 0.0,
                  0.0,  0.0, 1.0]
    extrinsic_T2: [ -0.55, 0.03, 0.05 ]
    extrinsic_R2: [-1.0, 0.0, 0.0, 
                  0.0, 0.0, 1.0,
                  0.0, 1.0, 0.0]
    # extrinsic_T_L2_wrt_L1: [0.128311 , 0.0, -0.096689]
    # extrinsic_R_L2_wrt_L1: [-0.2756374,  0.0000000,  0.9612617,
    #                         0.0000000, -1.0000000,  0.0000000,
    #                         0.9612617,  0.0000000, 0.2756374]
    ## only used when publish_tf_results is true, for visualization
    extrinsic_T_L1_wrt_drone: [0.0, 0.0, 0.0]     # only used when publish_tf_results is true, for visualization
    extrinsic_R_L1_wrt_drone: [1.0, 0.0, 0.0,
                               0.0, -1.0, 0.0,
                               0.0, 0.0, -1.0]

publish:
    path_en:  true
    scan_publish_en:  true       # false: close all the point cloud output
    dense_publish_en: true      # false: low down the points number in a global-frame point clouds scan.
    scan_bodyframe_pub_en: false # true: output the point cloud scans in IMU-body-frame

pcd_save:
    pcd_save_en: false
    interval: -1                 # how many LiDAR frames saved in each pcd file; 
                                 # -1 : all frames will be saved in ONE pcd file, may lead to memory crash when having too much frames.
